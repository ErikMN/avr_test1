
simple3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000031a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  0000031a  0000038e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000040  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000010f  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000820  00000000  00000000  00000507  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002bb  00000000  00000000  00000d27  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000069d  00000000  00000000  00000fe2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000110  00000000  00000000  00001680  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001d4  00000000  00000000  00001790  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000022a  00000000  00000000  00001964  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00001b8e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e1       	ldi	r30, 0x1A	; 26
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 38       	cpi	r26, 0x8A	; 138
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  7a:	0c 94 8b 01 	jmp	0x316	; 0x316 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <init>:

#define F_CPU 16000000UL

void init()
{
	PORTA = 0x00;	DDRA = 0x00;
  82:	1b ba       	out	0x1b, r1	; 27
  84:	1a ba       	out	0x1a, r1	; 26
	PORTB = 0x00;	DDRB = 0xFF;
  86:	18 ba       	out	0x18, r1	; 24
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	87 bb       	out	0x17, r24	; 23
	PORTC = 0x00;	DDRC = 0x00;
  8c:	15 ba       	out	0x15, r1	; 21
  8e:	14 ba       	out	0x14, r1	; 20
	PORTD = 0x00;	DDRD = 0x00;
  90:	12 ba       	out	0x12, r1	; 18
  92:	11 ba       	out	0x11, r1	; 17
}
  94:	08 95       	ret

00000096 <adc_init>:

void adc_init()									// Function to initialise the ADC feature
{
	ADCSRA = 0x00;								// Clear previous ADC results and status flags
  96:	16 b8       	out	0x06, r1	; 6
	ADMUX = 0x60;								// 0x40 for 10 bits
  98:	80 e6       	ldi	r24, 0x60	; 96
  9a:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0x87;								// We have set the ADSC bit to start a conversion, and the
  9c:	87 e8       	ldi	r24, 0x87	; 135
  9e:	86 b9       	out	0x06, r24	; 6
												// ADPS bits are set so that the prescaler is 128
	ADCSRA = 0x80;								// ADEN is set, to enable the ADC
  a0:	80 e8       	ldi	r24, 0x80	; 128
  a2:	86 b9       	out	0x06, r24	; 6
}
  a4:	08 95       	ret

000000a6 <adc_start>:

unsigned char adc_start(unsigned char channel) 	// Function to perform an ADC conversion, Takes 0-8 as input
{												// to select which input to convert
	unsigned char i;
	ADCH = 0x00;								// Clear the previous result
  a6:	15 b8       	out	0x05, r1	; 5

	i = channel & 0x07;							// Decide which line to perform ADC conversion on
	ADMUX = i | 0x60;							// Enter which line to perform in the ADC control register
  a8:	87 70       	andi	r24, 0x07	; 7
  aa:	80 66       	ori	r24, 0x60	; 96
  ac:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= 1 << ADSC;
  ae:	36 9a       	sbi	0x06, 6	; 6
  
	while(ADCSRA & (1 << ADSC))  				// wait for conv. to complete
  b0:	36 99       	sbic	0x06, 6	; 6
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <adc_start+0xa>
		;

	//unsigned char temp = ADCH; 					// unsigned int temp=ADC;   for 10 bits
	//return temp;

	return ADCH;
  b4:	85 b1       	in	r24, 0x05	; 5
}
  b6:	08 95       	ret

000000b8 <main>:

int main()
{
  b8:	1f 93       	push	r17
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
	init();
  be:	0e 94 41 00 	call	0x82	; 0x82 <init>
	LCD_Init();
  c2:	0e 94 41 01 	call	0x282	; 0x282 <LCD_Init>
	SREG |= 0x80; // Global Interrupt Enable
  c6:	8f b7       	in	r24, 0x3f	; 63
  c8:	80 68       	ori	r24, 0x80	; 128
  ca:	8f bf       	out	0x3f, r24	; 63
	PORTD = 0x00;	DDRD = 0x00;
}

void adc_init()									// Function to initialise the ADC feature
{
	ADCSRA = 0x00;								// Clear previous ADC results and status flags
  cc:	16 b8       	out	0x06, r1	; 6
	ADMUX = 0x60;								// 0x40 for 10 bits
  ce:	80 e6       	ldi	r24, 0x60	; 96
  d0:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0x87;								// We have set the ADSC bit to start a conversion, and the
  d2:	87 e8       	ldi	r24, 0x87	; 135
  d4:	86 b9       	out	0x06, r24	; 6
												// ADPS bits are set so that the prescaler is 128
	ADCSRA = 0x80;								// ADEN is set, to enable the ADC
  d6:	80 e8       	ldi	r24, 0x80	; 128
  d8:	86 b9       	out	0x06, r24	; 6
{
	init();
	LCD_Init();
	SREG |= 0x80; // Global Interrupt Enable
	adc_init();
	LCD_Light(1);
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCD_Light>

	LCD_PlaceString(0, "ADC val: ");
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	60 e6       	ldi	r22, 0x60	; 96
  e4:	70 e0       	ldi	r23, 0x00	; 0
  e6:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_PlaceString>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ea:	c0 e9       	ldi	r28, 0x90	; 144
  ec:	d1 e0       	ldi	r29, 0x01	; 1

	
	unsigned char val;
	for(;;)
	{
		val = adc_start(0);
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_start>
  f4:	18 2f       	mov	r17, r24
		LCD_PlaceByte(9, val);
  f6:	89 e0       	ldi	r24, 0x09	; 9
  f8:	61 2f       	mov	r22, r17
  fa:	0e 94 12 01 	call	0x224	; 0x224 <LCD_PlaceByte>

		if(val > 85)
  fe:	16 35       	cpi	r17, 0x56	; 86
 100:	20 f0       	brcs	.+8      	; 0x10a <main+0x52>
			LCD_PlaceString(16, "Danger! > 85");
 102:	80 e1       	ldi	r24, 0x10	; 16
 104:	6a e6       	ldi	r22, 0x6A	; 106
 106:	70 e0       	ldi	r23, 0x00	; 0
 108:	03 c0       	rjmp	.+6      	; 0x110 <main+0x58>
		else
			LCD_PlaceString(16, "            ");
 10a:	80 e1       	ldi	r24, 0x10	; 16
 10c:	67 e7       	ldi	r22, 0x77	; 119
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_PlaceString>
 114:	84 ef       	ldi	r24, 0xF4	; 244
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	fe 01       	movw	r30, r28
 11a:	31 97       	sbiw	r30, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <main+0x62>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 11e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 120:	d9 f7       	brne	.-10     	; 0x118 <main+0x60>
		_delay_ms(50);

		

		//LCD_Clear();
		LCD_PlaceString(9, "     ");
 122:	89 e0       	ldi	r24, 0x09	; 9
 124:	64 e8       	ldi	r22, 0x84	; 132
 126:	70 e0       	ldi	r23, 0x00	; 0
 128:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_PlaceString>
 12c:	e0 cf       	rjmp	.-64     	; 0xee <main+0x36>

0000012e <E_Pulse>:
#define E_HIGH		OUT  |=  0x04
#define E_LOW		OUT  &= ~0x04

void E_Pulse()
{
	OUT  |= 0x04;						// e-pulse 1 
 12e:	c2 9a       	sbi	0x18, 2	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	8a 95       	dec	r24
 134:	f1 f7       	brne	.-4      	; 0x132 <E_Pulse+0x4>
	_delay_us(0.45);					// wait 0.45 ms 
	OUT  &= ~0x04;						// e-pulse 0		
 136:	c2 98       	cbi	0x18, 2	; 24
}
 138:	08 95       	ret

0000013a <BF_Test>:

void BF_Test()							// wait for display to become ready
{
	DATA_DIR   &=  0x0F; 				// LCD-databus set as inport
 13a:	87 b3       	in	r24, 0x17	; 23
 13c:	8f 70       	andi	r24, 0x0F	; 15
 13e:	87 bb       	out	0x17, r24	; 23
	OUT  &= ~0x01;						// RS (Register Select) set as 0 
 140:	c0 98       	cbi	0x18, 0	; 24
	OUT  |=  0x02; 						// R/W (Read/Write) set as 1 (read) 
 142:	c1 9a       	sbi	0x18, 1	; 24
	E_HIGH;								// enable-pulse set as 1
 144:	c2 9a       	sbi	0x18, 2	; 24
	
	while ((IN & 0x80))					// read BF (bit 7 OUT) wait until it returns 0 
 146:	b7 99       	sbic	0x16, 7	; 22
 148:	fe cf       	rjmp	.-4      	; 0x146 <BF_Test+0xc>
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	8a 95       	dec	r24
 14e:	f1 f7       	brne	.-4      	; 0x14c <BF_Test+0x12>
		;
	
	_delay_us(0.45);
	E_LOW;								// enable-pulse set as 0 
 150:	c2 98       	cbi	0x18, 2	; 24
	//E_Pulse();						// don't need if we wait before setting E to low
}
 152:	08 95       	ret

00000154 <LCD_WriteCommand>:

/** The 4 MSB in OUT gets the 4 MSB of cmd and then the 4 LSB of cmd, E_Pulse between. */
void LCD_WriteCommand(unsigned char cmd)
{
	DATA_DIR  |=  0xF0;					// LCD-databus set as outport
 154:	97 b3       	in	r25, 0x17	; 23
 156:	90 6f       	ori	r25, 0xF0	; 240
 158:	97 bb       	out	0x17, r25	; 23
	OUT &= ~0x03;						// RS and R/W set as 0 (write)
 15a:	98 b3       	in	r25, 0x18	; 24
 15c:	9c 7f       	andi	r25, 0xFC	; 252
 15e:	98 bb       	out	0x18, r25	; 24
	
	OUT |=  0xF0;
 160:	98 b3       	in	r25, 0x18	; 24
 162:	90 6f       	ori	r25, 0xF0	; 240
 164:	98 bb       	out	0x18, r25	; 24
	OUT &=  (cmd | 0x0F);
 166:	28 b3       	in	r18, 0x18	; 24
 168:	98 2f       	mov	r25, r24
 16a:	9f 60       	ori	r25, 0x0F	; 15
 16c:	92 23       	and	r25, r18
 16e:	98 bb       	out	0x18, r25	; 24
#define E_HIGH		OUT  |=  0x04
#define E_LOW		OUT  &= ~0x04

void E_Pulse()
{
	OUT  |= 0x04;						// e-pulse 1 
 170:	c2 9a       	sbi	0x18, 2	; 24
 172:	22 e0       	ldi	r18, 0x02	; 2
 174:	92 2f       	mov	r25, r18
 176:	9a 95       	dec	r25
 178:	f1 f7       	brne	.-4      	; 0x176 <LCD_WriteCommand+0x22>
	_delay_us(0.45);					// wait 0.45 ms 
	OUT  &= ~0x04;						// e-pulse 0		
 17a:	c2 98       	cbi	0x18, 2	; 24
	OUT |=  0xF0;
	OUT &=  (cmd | 0x0F);

	E_Pulse();
	
	OUT |=  0xF0;
 17c:	98 b3       	in	r25, 0x18	; 24
 17e:	90 6f       	ori	r25, 0xF0	; 240
 180:	98 bb       	out	0x18, r25	; 24
	OUT &=  ((cmd << 4) | 0x0F);
 182:	98 b3       	in	r25, 0x18	; 24
 184:	82 95       	swap	r24
 186:	80 7f       	andi	r24, 0xF0	; 240
 188:	8f 60       	ori	r24, 0x0F	; 15
 18a:	98 23       	and	r25, r24
 18c:	98 bb       	out	0x18, r25	; 24
#define E_HIGH		OUT  |=  0x04
#define E_LOW		OUT  &= ~0x04

void E_Pulse()
{
	OUT  |= 0x04;						// e-pulse 1 
 18e:	c2 9a       	sbi	0x18, 2	; 24
 190:	2a 95       	dec	r18
 192:	f1 f7       	brne	.-4      	; 0x190 <LCD_WriteCommand+0x3c>
	_delay_us(0.45);					// wait 0.45 ms 
	OUT  &= ~0x04;						// e-pulse 0		
 194:	c2 98       	cbi	0x18, 2	; 24
	
	OUT |=  0xF0;
	OUT &=  ((cmd << 4) | 0x0F);
	
	E_Pulse();
	BF_Test();							// wait until display gets ready for next instr.
 196:	0e 94 9d 00 	call	0x13a	; 0x13a <BF_Test>
}
 19a:	08 95       	ret

0000019c <LCD_WriteCharacter>:

/** Same as LCD_WriteCommand, difference: RS = 1 */
void LCD_WriteCharacter(unsigned char character)
{
	E_HIGH;	
 19c:	c2 9a       	sbi	0x18, 2	; 24

	DATA_DIR  |=  0xF0;					// LCD-databus set as outport
 19e:	97 b3       	in	r25, 0x17	; 23
 1a0:	90 6f       	ori	r25, 0xF0	; 240
 1a2:	97 bb       	out	0x17, r25	; 23
	OUT &= ~0x02;						// R/W set as 0 (write)
 1a4:	c1 98       	cbi	0x18, 1	; 24
	OUT |=  0x01;						// RS set as 1
 1a6:	c0 9a       	sbi	0x18, 0	; 24

	OUT |=  0xF0;
 1a8:	98 b3       	in	r25, 0x18	; 24
 1aa:	90 6f       	ori	r25, 0xF0	; 240
 1ac:	98 bb       	out	0x18, r25	; 24
	OUT &=  (character | 0x0F);
 1ae:	28 b3       	in	r18, 0x18	; 24
 1b0:	98 2f       	mov	r25, r24
 1b2:	9f 60       	ori	r25, 0x0F	; 15
 1b4:	92 23       	and	r25, r18
 1b6:	98 bb       	out	0x18, r25	; 24
#define E_HIGH		OUT  |=  0x04
#define E_LOW		OUT  &= ~0x04

void E_Pulse()
{
	OUT  |= 0x04;						// e-pulse 1 
 1b8:	c2 9a       	sbi	0x18, 2	; 24
 1ba:	22 e0       	ldi	r18, 0x02	; 2
 1bc:	92 2f       	mov	r25, r18
 1be:	9a 95       	dec	r25
 1c0:	f1 f7       	brne	.-4      	; 0x1be <LCD_WriteCharacter+0x22>
	_delay_us(0.45);					// wait 0.45 ms 
	OUT  &= ~0x04;						// e-pulse 0		
 1c2:	c2 98       	cbi	0x18, 2	; 24
	OUT |=  0xF0;
	OUT &=  (character | 0x0F);

	E_Pulse();
	
	OUT |=  0xF0;
 1c4:	98 b3       	in	r25, 0x18	; 24
 1c6:	90 6f       	ori	r25, 0xF0	; 240
 1c8:	98 bb       	out	0x18, r25	; 24
	OUT &=  ((character << 4) | 0x0F);
 1ca:	98 b3       	in	r25, 0x18	; 24
 1cc:	82 95       	swap	r24
 1ce:	80 7f       	andi	r24, 0xF0	; 240
 1d0:	8f 60       	ori	r24, 0x0F	; 15
 1d2:	98 23       	and	r25, r24
 1d4:	98 bb       	out	0x18, r25	; 24
#define E_HIGH		OUT  |=  0x04
#define E_LOW		OUT  &= ~0x04

void E_Pulse()
{
	OUT  |= 0x04;						// e-pulse 1 
 1d6:	c2 9a       	sbi	0x18, 2	; 24
 1d8:	2a 95       	dec	r18
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <LCD_WriteCharacter+0x3c>
	_delay_us(0.45);					// wait 0.45 ms 
	OUT  &= ~0x04;						// e-pulse 0		
 1dc:	c2 98       	cbi	0x18, 2	; 24
	
	OUT |=  0xF0;
	OUT &=  ((character << 4) | 0x0F);

	E_Pulse();
	BF_Test();
 1de:	0e 94 9d 00 	call	0x13a	; 0x13a <BF_Test>
}
 1e2:	08 95       	ret

000001e4 <LCD_PlaceCharacter>:

void LCD_PlaceCharacter(unsigned char position, unsigned char character)
{
 1e4:	1f 93       	push	r17
 1e6:	16 2f       	mov	r17, r22
	if(position > 15) position += 48;	// Place text on next line
 1e8:	80 31       	cpi	r24, 0x10	; 16
 1ea:	08 f0       	brcs	.+2      	; 0x1ee <LCD_PlaceCharacter+0xa>
 1ec:	80 5d       	subi	r24, 0xD0	; 208
	LCD_WriteCommand(0x80 | position);	
 1ee:	80 68       	ori	r24, 0x80	; 128
 1f0:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_WriteCommand>
	LCD_WriteCharacter(character);
 1f4:	81 2f       	mov	r24, r17
 1f6:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_WriteCharacter>
}
 1fa:	1f 91       	pop	r17
 1fc:	08 95       	ret

000001fe <LCD_PlaceString>:

void LCD_PlaceString(unsigned char position, const unsigned char *address)
{
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	eb 01       	movw	r28, r22
	if(position > 15) position += 48;	
 204:	80 31       	cpi	r24, 0x10	; 16
 206:	08 f0       	brcs	.+2      	; 0x20a <LCD_PlaceString+0xc>
 208:	80 5d       	subi	r24, 0xD0	; 208
	LCD_WriteCommand(0x80 | position);
 20a:	80 68       	ori	r24, 0x80	; 128
 20c:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_WriteCommand>
 210:	03 c0       	rjmp	.+6      	; 0x218 <LCD_PlaceString+0x1a>
	while (*address != '\0') LCD_WriteCharacter(*address++);
 212:	21 96       	adiw	r28, 0x01	; 1
 214:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_WriteCharacter>
 218:	88 81       	ld	r24, Y
 21a:	88 23       	and	r24, r24
 21c:	d1 f7       	brne	.-12     	; 0x212 <LCD_PlaceString+0x14>
}
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	08 95       	ret

00000224 <LCD_PlaceByte>:

void LCD_PlaceByte(unsigned char position, unsigned char byte)
{
 224:	1f 93       	push	r17
 226:	16 2f       	mov	r17, r22
	if(position > 15) position += 48;
 228:	80 31       	cpi	r24, 0x10	; 16
 22a:	08 f0       	brcs	.+2      	; 0x22e <LCD_PlaceByte+0xa>
 22c:	80 5d       	subi	r24, 0xD0	; 208
	LCD_WriteCommand(0x80 | position);
 22e:	80 68       	ori	r24, 0x80	; 128
 230:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_WriteCommand>

	unsigned char hundred, ten, one;
	hundred = byte / 100;
 234:	81 2f       	mov	r24, r17
 236:	64 e6       	ldi	r22, 0x64	; 100
 238:	0e 94 7f 01 	call	0x2fe	; 0x2fe <__udivmodqi4>
 23c:	28 2f       	mov	r18, r24
	ten = (byte % 100) / 10;
 23e:	81 2f       	mov	r24, r17
 240:	0e 94 7f 01 	call	0x2fe	; 0x2fe <__udivmodqi4>
 244:	19 2f       	mov	r17, r25
	one = (byte % 100) % 10;

	hundred |=  0x30;					// creates ASCII
 246:	20 63       	ori	r18, 0x30	; 48
	ten 	|=  0x30;
	one 	|=  0x30;

	if (hundred != 0x30) LCD_WriteCharacter(hundred);
 248:	20 33       	cpi	r18, 0x30	; 48
 24a:	19 f0       	breq	.+6      	; 0x252 <LCD_PlaceByte+0x2e>
 24c:	82 2f       	mov	r24, r18
 24e:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_WriteCharacter>
	if(position > 15) position += 48;
	LCD_WriteCommand(0x80 | position);

	unsigned char hundred, ten, one;
	hundred = byte / 100;
	ten = (byte % 100) / 10;
 252:	81 2f       	mov	r24, r17
 254:	6a e0       	ldi	r22, 0x0A	; 10
 256:	0e 94 7f 01 	call	0x2fe	; 0x2fe <__udivmodqi4>
	hundred |=  0x30;					// creates ASCII
	ten 	|=  0x30;
	one 	|=  0x30;

	if (hundred != 0x30) LCD_WriteCharacter(hundred);
	LCD_WriteCharacter(ten);
 25a:	80 63       	ori	r24, 0x30	; 48
 25c:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_WriteCharacter>
	LCD_WriteCommand(0x80 | position);

	unsigned char hundred, ten, one;
	hundred = byte / 100;
	ten = (byte % 100) / 10;
	one = (byte % 100) % 10;
 260:	81 2f       	mov	r24, r17
 262:	6a e0       	ldi	r22, 0x0A	; 10
 264:	0e 94 7f 01 	call	0x2fe	; 0x2fe <__udivmodqi4>
	ten 	|=  0x30;
	one 	|=  0x30;

	if (hundred != 0x30) LCD_WriteCharacter(hundred);
	LCD_WriteCharacter(ten);
	LCD_WriteCharacter(one);
 268:	89 2f       	mov	r24, r25
 26a:	80 63       	ori	r24, 0x30	; 48
 26c:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_WriteCharacter>
}
 270:	1f 91       	pop	r17
 272:	08 95       	ret

00000274 <LCD_PlaceCursor>:

void LCD_PlaceCursor(unsigned char position)
{
	if(position > 15) position += 48;
 274:	80 31       	cpi	r24, 0x10	; 16
 276:	08 f0       	brcs	.+2      	; 0x27a <LCD_PlaceCursor+0x6>
 278:	80 5d       	subi	r24, 0xD0	; 208
	LCD_WriteCommand(0x80 | position);
 27a:	80 68       	ori	r24, 0x80	; 128
 27c:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_WriteCommand>
}
 280:	08 95       	ret

00000282 <LCD_Init>:

void LCD_Init()
{
	OUT &= ~0x01; 					// RS 0
 282:	c0 98       	cbi	0x18, 0	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 284:	80 e6       	ldi	r24, 0x60	; 96
 286:	9a ee       	ldi	r25, 0xEA	; 234
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <LCD_Init+0x6>

	//OUT = 0x30;					// 8-bit interface 
	//E_Pulse();
	//_delay_ms(5);

	OUT = 0x30;
 28c:	80 e3       	ldi	r24, 0x30	; 48
 28e:	88 bb       	out	0x18, r24	; 24
#define E_HIGH		OUT  |=  0x04
#define E_LOW		OUT  &= ~0x04

void E_Pulse()
{
	OUT  |= 0x04;						// e-pulse 1 
 290:	c2 9a       	sbi	0x18, 2	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 292:	92 e0       	ldi	r25, 0x02	; 2
 294:	29 2f       	mov	r18, r25
 296:	2a 95       	dec	r18
 298:	f1 f7       	brne	.-4      	; 0x296 <LCD_Init+0x14>
	_delay_us(0.45);					// wait 0.45 ms 
	OUT  &= ~0x04;						// e-pulse 0		
 29a:	c2 98       	cbi	0x18, 2	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 29c:	e0 e9       	ldi	r30, 0x90	; 144
 29e:	f1 e0       	ldi	r31, 0x01	; 1
 2a0:	31 97       	sbiw	r30, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <LCD_Init+0x1e>

	OUT = 0x30;
	E_Pulse();
	_delay_us(100);

	OUT = 0x30;
 2a4:	88 bb       	out	0x18, r24	; 24
#define E_HIGH		OUT  |=  0x04
#define E_LOW		OUT  &= ~0x04

void E_Pulse()
{
	OUT  |= 0x04;						// e-pulse 1 
 2a6:	c2 9a       	sbi	0x18, 2	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2a8:	89 2f       	mov	r24, r25
 2aa:	8a 95       	dec	r24
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <LCD_Init+0x28>
	_delay_us(0.45);					// wait 0.45 ms 
	OUT  &= ~0x04;						// e-pulse 0		
 2ae:	c2 98       	cbi	0x18, 2	; 24
 2b0:	25 ed       	ldi	r18, 0xD5	; 213
 2b2:	82 2f       	mov	r24, r18
 2b4:	8a 95       	dec	r24
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <LCD_Init+0x32>

	OUT = 0x30;
	E_Pulse();
	_delay_us(40);

	OUT = 0x20;
 2b8:	80 e2       	ldi	r24, 0x20	; 32
 2ba:	88 bb       	out	0x18, r24	; 24
#define E_HIGH		OUT  |=  0x04
#define E_LOW		OUT  &= ~0x04

void E_Pulse()
{
	OUT  |= 0x04;						// e-pulse 1 
 2bc:	c2 9a       	sbi	0x18, 2	; 24
 2be:	9a 95       	dec	r25
 2c0:	f1 f7       	brne	.-4      	; 0x2be <LCD_Init+0x3c>
	_delay_us(0.45);					// wait 0.45 ms 
	OUT  &= ~0x04;						// e-pulse 0		
 2c2:	c2 98       	cbi	0x18, 2	; 24
 2c4:	2a 95       	dec	r18
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <LCD_Init+0x42>

	OUT = 0x20;
	E_Pulse();
	_delay_us(40);

	LCD_WriteCommand(0x28);				// 4-bit, 2-lines 0x28
 2c8:	88 e2       	ldi	r24, 0x28	; 40
 2ca:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_WriteCommand>
	//LCD_WriteCommand(0x20);				// 4-bit, 1-line 0x20
	LCD_WriteCommand(0x01);				// display clear 
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_WriteCommand>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2d4:	80 ea       	ldi	r24, 0xA0	; 160
 2d6:	99 e1       	ldi	r25, 0x19	; 25
 2d8:	01 97       	sbiw	r24, 0x01	; 1
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <LCD_Init+0x56>
	_delay_us(1640);
	LCD_WriteCommand(0x06);				// cursor increment 0x06
 2dc:	86 e0       	ldi	r24, 0x06	; 6
 2de:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_WriteCommand>
	LCD_WriteCommand(0x0C);				// disp on, cursor blink 0x0E, no cursor 0x0C
 2e2:	8c e0       	ldi	r24, 0x0C	; 12
 2e4:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_WriteCommand>
}
 2e8:	08 95       	ret

000002ea <LCD_Clear>:

void LCD_Clear()
{
	LCD_WriteCommand(0x01);
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_WriteCommand>
}
 2f0:	08 95       	ret

000002f2 <LCD_Light>:

void LCD_Light(unsigned char c)
{
	if(c)
 2f2:	88 23       	and	r24, r24
 2f4:	11 f0       	breq	.+4      	; 0x2fa <LCD_Light+0x8>
		OUT |=  0x08;
 2f6:	c3 9a       	sbi	0x18, 3	; 24
 2f8:	08 95       	ret
	else
		OUT &= ~0x08;
 2fa:	c3 98       	cbi	0x18, 3	; 24
 2fc:	08 95       	ret

000002fe <__udivmodqi4>:
 2fe:	99 1b       	sub	r25, r25
 300:	79 e0       	ldi	r23, 0x09	; 9
 302:	04 c0       	rjmp	.+8      	; 0x30c <__udivmodqi4_ep>

00000304 <__udivmodqi4_loop>:
 304:	99 1f       	adc	r25, r25
 306:	96 17       	cp	r25, r22
 308:	08 f0       	brcs	.+2      	; 0x30c <__udivmodqi4_ep>
 30a:	96 1b       	sub	r25, r22

0000030c <__udivmodqi4_ep>:
 30c:	88 1f       	adc	r24, r24
 30e:	7a 95       	dec	r23
 310:	c9 f7       	brne	.-14     	; 0x304 <__udivmodqi4_loop>
 312:	80 95       	com	r24
 314:	08 95       	ret

00000316 <_exit>:
 316:	f8 94       	cli

00000318 <__stop_program>:
 318:	ff cf       	rjmp	.-2      	; 0x318 <__stop_program>
